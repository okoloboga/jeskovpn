import logging
import re
import json
import os

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fluentogram import TranslatorRunner
from datetime import datetime, timezone

from services import admin_req, payment_req, raffle_req, AdminAuthStates, RaffleAdminStates
from utils.admin_auth import is_admin
from keyboards import admin_kb
from config import get_config, Admin, Channel, BotConfig

admin_router = Router()
admin = get_config(Admin, "admin")
channel = get_config(Channel, "channel")
bot_config = get_config(BotConfig, "bot")
admin_id = admin.id
PER_PAGE = 20
CHANNEL_ID = channel.id
BOT_URL = bot_config.url
logger = logging.getLogger(__name__)
admin_logger = logging.getLogger("admin_actions")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(filename)s:%(lineno)d #%(levelname)-8s "
           "[%(asctime)s] - %(name)s - %(message)s"
)
admin_handler = logging.FileHandler("admin_actions.log")
admin_handler.setFormatter(logging.Formatter(
    "%(asctime)s [%(levelname)s] %(message)s"
))
admin_logger.addHandler(admin_handler)
admin_logger.setLevel(logging.INFO)

@admin_router.message(F.text == "/admin")
async def admin_entry(
        message: Message, 
        state: FSMContext,
        i18n: TranslatorRunner
) -> None:
    user_id = message.from_user.id

    logger.info(f'ID: {user_id}; ADMINS: {admin_id}')
    is_admin_check = await is_admin(str(user_id), admin_id)
    if not is_admin_check:
        logger.info(f'not admin. user_id: {user_id}, admin_id: {admin_id}')
        await message.answer(text=i18n.unknown.message())
        return

    if not await admin_req.has_admin_password(user_id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
        await state.set_state(AdminAuthStates.waiting_for_new_password)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
        await state.set_state(AdminAuthStates.waiting_for_password)

@admin_router.message(AdminAuthStates.waiting_for_new_password)
async def admin_set_password(
        message: Message, 
        state: FSMContext
) -> None:
    user_id = message.from_user.id
    password = message.text.strip()

    if len(password) < 6:
        await message.answer("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    ok = await admin_req.set_admin_password(user_id, password)
    
    if ok:
        await message.answer("–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
                             reply_markup=admin_kb.admin_main_menu_kb())
        admin_logger.info(f"Admin {user_id} set password")
        await state.clear()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@admin_router.message(AdminAuthStates.waiting_for_password)
async def admin_check_password(
        message: Message, 
        state: FSMContext
) -> None:
    user_id = message.from_user.id
    password = message.text.strip()
    ok = await admin_req.check_admin_password(user_id, password)
    
    if ok:
        await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
                             reply_markup=admin_kb.admin_main_menu_kb())
        admin_logger.info(f"Admin {user_id} logged in")
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@admin_router.message(F.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users_menu(
        message: Message, 
        state: FSMContext
) -> None:
    summary = await admin_req.get_users_summary()
    if not summary:
        return await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    total = summary["total"]
    active = summary["active"]
    text = (
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"üü¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active}</b>"
    )
    users = await admin_req.get_users(skip=0, limit=PER_PAGE)
    await message.answer(
        text,
        reply_markup=admin_kb.users_list_kb(users, page=0, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {message.from_user.id} viewed users list")

@admin_router.callback_query(F.data.startswith("admin_users_page_"))
async def admin_users_pagination(
        callback: CallbackQuery
) -> None:
    page = int(callback.data.split("_")[-1])
    skip = page * PER_PAGE
    users = await admin_req.get_users(skip=skip, limit=PER_PAGE)
    await callback.message.edit_reply_markup(
        reply_markup=admin_kb.users_list_kb(users, page=page, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {callback.from_user.id} viewed users page {page+1}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_user_profile_"))
async def admin_user_profile(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    users = await admin_req.get_users(user_id=user_id)
    if not users:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    subscription = user["subscription"]
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username'] or user['first_name'] or 'N/A'} (ID: {user_id})\n"
        f"\nüìß Email: {user.get('email_address', 'N/A')}\n"
        f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.get('phone_number', 'N/A')}\n"
        f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0.0)}\n"
        f"\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')}\n"
        f"\nüì± –ü–æ–¥–ø–∏—Å–∫–∏:\n"
    )
    if subscription["device"]["duration"] > 0:
        text += f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {subscription['device']['duration']} –¥–Ω–µ–π, "
        text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['device']['devices']) or '–Ω–µ—Ç'}\n"
    if subscription["router"]["duration"] > 0:
        text += f"  - –†–æ—É—Ç–µ—Ä: {subscription['router']['duration']} –¥–Ω–µ–π, "
        text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['router']['devices']) or '–Ω–µ—Ç'}\n"
    if subscription["combo"]["duration"] > 0:
        text += f"  - –ö–æ–º–±–æ ({subscription['combo']['type']}): {subscription['combo']['duration']} –¥–Ω–µ–π, "
        text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['combo']['devices']) or '–Ω–µ—Ç'}\n"
    await callback.message.answer(
        text,
        reply_markup=admin_kb.user_profile_kb(user_id, is_blacklisted=user.get("is_blacklisted", False))

    )
    admin_logger.info(f"Admin {callback.from_user.id} viewed profile of user {user_id}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_add_balance_"))
async def admin_add_balance_start(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(user_id=user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000.50):")
    await state.set_state(AdminAuthStates.add_balance)
    await callback.answer()

@admin_router.message(AdminAuthStates.add_balance)
async def admin_add_balance_amount(message: Message, state: FSMContext):
    amount_text = message.text.strip()
    try:
        amount = float(amount_text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000.50). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    user_id = data["user_id"]
    await state.update_data(amount=amount)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"admin_confirm_balance_{user_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_cancel_balance")
        ]
    ])
    await message.answer(
        f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ID {user_id} –Ω–∞ {amount}?",
        reply_markup=confirm_kb
    )

@admin_router.callback_query(F.data.startswith("admin_confirm_balance_"))
async def admin_confirm_balance(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    amount = data.get("amount")
    
    if not amount:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return
    
    # –í—ã–∑–æ–≤ payment_balance_process
    result = await payment_req.payment_balance_process(
        user_id=user_id,
        amount=amount,
        period=0,
        device_type="balance",
        device="balance",
        payment_type="add_balance",
        method="admin"
    )
    
    if result:
        await callback.message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}.")
        admin_logger.info(f"Admin {callback.from_user.id} added balance {amount} to user {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = await admin_req.get_users(user_id=user_id)
        if users:
            user = users[0]
            subscription = user["subscription"]
            text = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username'] or user['first_name'] or 'N/A'} (ID: {user_id})\n"
                f"\nüìß Email: {user.get('email_address', 'N/A')}\n"
                f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0.0)}\n"
                f"\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')}\n"
                f"\nüì± –ü–æ–¥–ø–∏—Å–∫–∏:\n"
            )
            if subscription["device"]["duration"] > 0:
                text += f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {subscription['device']['duration']} –¥–Ω–µ–π, "
                text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['device']['devices']) or '–Ω–µ—Ç'}\n"
            if subscription["router"]["duration"] > 0:
                text += f"  - –†–æ—É—Ç–µ—Ä: {subscription['router']['duration']} –¥–Ω–µ–π, "
                text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['router']['devices']) or '–Ω–µ—Ç'}\n"
            if subscription["combo"]["duration"] > 0:
                text += f"  - –ö–æ–º–±–æ ({subscription['combo']['type']}): {subscription['combo']['duration']} –¥–Ω–µ–π, "
                text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['combo']['devices']) or '–Ω–µ—Ç'}\n"
            await callback.message.edit_text(
                text,
                reply_markup=admin_kb.user_profile_kb(user_id, is_blacklisted=user.get("is_blacklisted", False)),
                parse_mode="HTML"
            )
    else:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        admin_logger.error(f"Admin {callback.from_user.id} failed to add balance {amount} to user {user_id}")
    
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data == "admin_cancel_balance")
async def admin_cancel_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_unblock_user_"))
async def admin_unblock_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    
    success = await admin_req.remove_from_blacklist(user_id)
    if success:
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        admin_logger.info(f"Admin {callback.from_user.id} unblocked user {user_id}")
    else:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        admin_logger.error(f"Admin {callback.from_user.id} failed to unblock user {user_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await admin_req.get_users(user_id=user_id)
    if users:
        user = users[0]
        subscription = user["subscription"]
        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username'] or user['first_name'] or 'N/A'} (ID: {user_id})\n"
            f"\nüìß Email: {user.get('email_address', 'N/A')}\n"
            f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0.0)}\n"
            f"\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')}\n"
            f"\nüì± –ü–æ–¥–ø–∏—Å–∫–∏:\n"
        )
        if subscription["device"]["duration"] > 0:
            text += f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {subscription['device']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['device']['devices']) or '–Ω–µ—Ç'}\n"
        if subscription["router"]["duration"] > 0:
            text += f"  - –†–æ—É—Ç–µ—Ä: {subscription['router']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['router']['devices']) or '–Ω–µ—Ç'}\n"
        if subscription["combo"]["duration"] > 0:
            text += f"  - –ö–æ–º–±–æ ({subscription['combo']['type']}): {subscription['combo']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['combo']['devices']) or '–Ω–µ—Ç'}\n"
        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.user_profile_kb(user_id, is_blacklisted=user.get("is_blacklisted", False))

        )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_block_user_"))
async def admin_block_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    
    success = await admin_req.block_user(user_id)
    if success:
        await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        admin_logger.info(f"Admin {callback.from_user.id} blocked user {user_id}")
    else:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        admin_logger.error(f"Admin {callback.from_user.id} failed to block user {user_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await admin_req.get_users(user_id=user_id)
    if users:
        user = users[0]
        subscription = user["subscription"]
        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username'] or user['first_name'] or 'N/A'} (ID: {user_id})\n"
            f"\nüìß Email: {user.get('email_address', 'N/A')}\n"
            f"\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0.0)}\n"
            f"\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')}\n"
            f"\nüì± –ü–æ–¥–ø–∏—Å–∫–∏:\n"
        )
        if subscription["device"]["duration"] > 0:
            text += f"  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {subscription['device']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['device']['devices']) or '–Ω–µ—Ç'}\n"
        if subscription["router"]["duration"] > 0:
            text += f"  - –†–æ—É—Ç–µ—Ä: {subscription['router']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['router']['devices']) or '–Ω–µ—Ç'}\n"
        if subscription["combo"]["duration"] > 0:
            text += f"  - –ö–æ–º–±–æ ({subscription['combo']['type']}): {subscription['combo']['duration']} –¥–Ω–µ–π, "
            text += f"—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {', '.join(subscription['combo']['devices']) or '–Ω–µ—Ç'}\n"
        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.user_profile_kb(user_id, is_blacklisted=user.get("is_blacklisted", False))

        )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_user_"))
async def admin_delete_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    if str(user_id) == admin_id:
        await callback.message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    success = await admin_req.delete_user(user_id)
    await callback.message.answer(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω." if success else "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è."
    )
    admin_logger.info(f"Admin {callback.from_user.id} deleted user {user_id}")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_users")
async def admin_back_to_users(callback: CallbackQuery):
    summary = await admin_req.get_users_summary()
    if not summary:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return
    total = summary["total"]
    active = summary["active"]
    text = (
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"üü¢ –° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{active}</b>"
    )
    users = await admin_req.get_users(skip=0, limit=PER_PAGE)
    await callback.message.answer(
        text,
        reply_markup=admin_kb.users_list_kb(users, page=0, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {callback.from_user.id} returned to users list")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_main")
async def admin_back_to_main(callback: CallbackQuery):
    await callback.message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=admin_kb.admin_main_menu_kb()
    )
    admin_logger.info(f"Admin {callback.from_user.id} returned to main menu")
    await callback.answer()

@admin_router.message(F.text == "üîë –ö–ª—é—á–∏")
async def admin_keys_menu(message: Message, state: FSMContext):
    keys = await admin_req.get_keys(skip=0, limit=PER_PAGE)
    if not keys:
        await message.answer("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await message.answer(
        "üîë –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:",
        reply_markup=admin_kb.keys_list_kb(keys, page=0, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {message.from_user.id} viewed keys list")

@admin_router.callback_query(F.data.startswith("admin_keys_page_"))
async def admin_keys_pagination(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    skip = page * PER_PAGE
    keys = await admin_req.get_keys(skip=skip, limit=PER_PAGE)
    await callback.message.edit_reply_markup(
        reply_markup=admin_kb.keys_list_kb(keys, page=page, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {callback.from_user.id} viewed keys page {page+1}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_key_profile_"))
async def admin_key_profile(callback: CallbackQuery):
    vpn_key = callback.data.split("_")[-1]
    keys = await admin_req.get_keys(vpn_key=vpn_key)
    if not keys:
        await callback.message.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    key = keys[0]
    status = "–ê–∫—Ç–∏–≤–µ–Ω" if key['is_active'] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    text = (
        f"üîë –ö–ª—é—á: {key['vpn_key']}\n"
        f"\nüÜî Outline ID: {key['outline_key_id'] or 'N/A'}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {key['user_id']}\n"
        f"üì± –¢–∏–ø: {key['device_type']}\n"
        f"\nüìÖ –ù–∞—á–∞–ª–æ: {key['start_date']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {key['end_date']}\n"
        f"\nüü¢ –°—Ç–∞—Ç—É—Å: {status}"
    )
    await callback.message.answer(
        text,
        reply_markup=admin_kb.key_profile_kb(vpn_key)
    )
    admin_logger.info(f"Admin {callback.from_user.id} viewed key {vpn_key}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_key_history_"))
async def admin_key_history(callback: CallbackQuery):
    vpn_key = callback.data.split("_")[-1]
    history = await admin_req.get_key_history(vpn_key)
    if not history:
        await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –∫–ª—é—á–∞ {vpn_key}:\n\n"
    for idx, entry in enumerate(history, 1):
        text += (
            f"–ó–∞–ø–∏—Å—å {idx}:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entry['user_id']}\n"
            f"üì± –¢–∏–ø: {entry['device_type']}\n"
            f"üñ• –ò–º—è: {entry['device_name'] or 'N/A'}\n"
            f"\nüìÖ –ù–∞—á–∞–ª–æ: {entry['start_date']}\n"
            f"\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {entry['end_date']}\n\n"
        )
    await callback.message.answer(text)
    admin_logger.info(f"Admin {callback.from_user.id} viewed history of key {vpn_key}")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_keys")
async def admin_back_to_keys(callback: CallbackQuery):
    keys = await admin_req.get_keys(skip=0, limit=PER_PAGE)
    if not keys:
        await callback.message.answer("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await callback.message.answer(
        "üîë –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:",
        reply_markup=admin_kb.keys_list_kb(keys, page=0, per_page=PER_PAGE)
    )
    admin_logger.info(f"Admin {callback.from_user.id} returned to keys list")
    await callback.answer()

@admin_router.message(F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")
async def admin_finance_menu(message: Message, state: FSMContext):
    summary = await admin_req.get_payments_summary()
    if not summary:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    text = "üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ RUB):\n\n"
    
    # –ó–∞ –¥–µ–Ω—å
    text += "üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:\n"
    text += f"üí∏ –°—É–º–º–∞: {summary['day']['total_amount']} RUB\n"
    text += f"üìà –ü–ª–∞—Ç–µ–∂–∏: {summary['day']['total_count']}\n"
    for method, data in summary['day']['by_method'].items():
        text += f"  - {method}: {data['amount']} RUB ({data['count']} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
    
    # –ó–∞ –º–µ—Å—è—Ü
    text += "\nüìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n"
    text += f"üí∏ –°—É–º–º–∞: {summary['month']['total_amount']} RUB\n"
    text += f"üìà –ü–ª–∞—Ç–µ–∂–∏: {summary['month']['total_count']}\n"
    for method, data in summary['month']['by_method'].items():
        text += f"  - {method}: {data['amount']} RUB ({data['count']} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
    
    # –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è
    text += "\nüìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n"
    text += f"üí∏ –°—É–º–º–∞: {summary['all_time']['total_amount']} RUB\n"
    text += f"üìà –ü–ª–∞—Ç–µ–∂–∏: {summary['all_time']['total_count']}\n"
    for method, data in summary['all_time']['by_method'].items():
        text += f"  - {method}: {data['amount']} RUB ({data['count']} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
    
    await message.answer(
        text,
        reply_markup=admin_kb.finance_menu_kb()
    )
    admin_logger.info(f"Admin {message.from_user.id} viewed finance summary")

@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast_menu(
        message: Message, 
        state: FSMContext
) -> None:
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    await state.set_state(AdminAuthStates.waiting_for_broadcast_message)
    admin_logger.info(f"Admin {message.from_user.id} started broadcast")

@admin_router.message(AdminAuthStates.waiting_for_broadcast_message)
async def admin_broadcast_receive_message(
        message: Message, 
        state: FSMContext
) -> None:

    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return
    if len(text) > 4096:
        await message.answer("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    await state.update_data(broadcast_text=text)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=admin_kb.broadcast_image_kb()
    )
    await state.set_state(AdminAuthStates.waiting_for_broadcast_image)
    admin_logger.info(f"Admin {message.from_user.id} entered broadcast text")

@admin_router.message(AdminAuthStates.waiting_for_broadcast_image, F.photo)
async def admin_broadcast_receive_image(
        message: Message, 
        state: FSMContext, 
        bot: Bot
) -> None:
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    state_data = await state.get_data()
    text = state_data.get("broadcast_text")
    
    await state.update_data(broadcast_photo_id=photo.file_id)
    
    await message.answer_photo(
        photo=photo.file_id,
        caption=text,
        reply_markup=admin_kb.broadcast_confirmation_kb()
    )
    await state.set_state(AdminAuthStates.waiting_for_broadcast_confirmation)
    admin_logger.info(f"Admin {message.from_user.id} previewed broadcast with image")

@admin_router.callback_query(F.data == "skip_broadcast_image", AdminAuthStates.waiting_for_broadcast_image)
async def admin_broadcast_skip_image(
        callback: CallbackQuery, 
        state: FSMContext, 
        bot: Bot
) -> None:
    state_data = await state.get_data()
    text = state_data.get("broadcast_text")
    
    await callback.message.answer(
        text,
        reply_markup=admin_kb.broadcast_confirmation_kb()
    )
    await state.set_state(AdminAuthStates.waiting_for_broadcast_confirmation)
    admin_logger.info(f"Admin {callback.from_user.id} previewed broadcast without image")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_broadcast_confirm", AdminAuthStates.waiting_for_broadcast_confirmation)
async def admin_broadcast_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    text = state_data.get("broadcast_text")
    photo_id = state_data.get("broadcast_photo_id")
    
    user_ids = await admin_req.get_all_users()
    if not user_ids:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        await callback.answer()
        return
    
    success_count = 0
    fail_count = 0
    for user_id in user_ids:
        try:
            if photo_id:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo_id,
                    caption=text
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=text
                )
            success_count += 1
        except Exception as e:
            admin_logger.error(f"Broadcast to user {user_id} failed: {e}")
            fail_count += 1
    
    await callback.message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {fail_count}"
    )
    admin_logger.info(f"Admin {callback.from_user.id} sent broadcast {'with image' if photo_id else 'without image'}: {success_count} success, {fail_count} failed")
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data == "admin_broadcast_cancel", AdminAuthStates.waiting_for_broadcast_confirmation)
async def admin_broadcast_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    admin_logger.info(f"Admin {callback.from_user.id} cancelled broadcast")
    await state.clear()
    await callback.answer()

@admin_router.message(F.text == "üõ° –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
async def admin_security_menu(message: Message):
    admins = await admin_req.get_admins()
    if not admins:
        await message.answer(
            "–ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=admin_kb.admins_list_kb(admins)
        )
    else:
        await message.answer(
            ("üõ° –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.\n" +
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ:"),
            reply_markup=admin_kb.admins_list_kb(admins)
        )
    admin_logger.info(f"Admin {message.from_user.id} viewed admins list")

@admin_router.callback_query(F.data == "admin_add_admin")
async def admin_add_admin_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:",
        reply_markup=admin_kb.admin_add_kb()
    )
    await state.set_state(AdminAuthStates.waiting_for_new_admin_id)
    admin_logger.info(f"Admin {callback.from_user.id} started adding new admin")
    await callback.answer()

@admin_router.message(AdminAuthStates.waiting_for_new_admin_id)
async def admin_add_admin_receive_id(message: Message, state: FSMContext):
    user_id_text = message.text.strip()
    if not user_id_text.isdigit():
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    user_id = int(user_id_text)
    
    success = await admin_req.add_admin(user_id)
    if success:
        await message.answer(f"–ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        admin_logger.info(f"Admin {message.from_user.id} added admin {user_id}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        admin_logger.error(f"Admin {message.from_user.id} failed to add admin {user_id}")
    
    admins = await admin_req.get_admins()
    await message.answer(
        "üõ° –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:",
        reply_markup=admin_kb.admins_list_kb(admins)
    )
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_remove_admin_"))
async def admin_remove_admin(callback: CallbackQuery):
    admin_id = int(callback.data.split("_")[-1])
    if admin_id == callback.from_user.id:
        await callback.message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        await callback.answer()
        return
    
    success = await admin_req.delete_admin(admin_id)

    if success:
        await callback.message.answer(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω.")
        admin_logger.info(f"Admin {callback.from_user.id} removed admin {admin_id}")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.")
        admin_logger.error(f"Admin {callback.from_user.id} failed to remove admin {admin_id}: {success}")
    
    admins = await admin_req.get_admins()
    await callback.message.answer(
        "üõ° –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:",
        reply_markup=admin_kb.admins_list_kb(admins)
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_cancel_add_admin")
async def admin_cancel_add_admin(callback: CallbackQuery, state: FSMContext):
    admins = await admin_req.get_admins()
    await callback.message.answer(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=admin_kb.admins_list_kb(admins)
    )
    admin_logger.info(f"Admin {callback.from_user.id} canceled adding admin")
    await state.clear()
    await callback.answer()

@admin_router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def admin_search_users_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (username, ID, email, –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω):")
    await state.set_state(AdminAuthStates.search_users)

@admin_router.message(AdminAuthStates.search_users)
async def admin_search_users_process(message: Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    users = await admin_req.get_users(query=query, skip=0, limit=20)
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    admin_logger.info(f"Admin {message.from_user.id} searched users with query '{query}'")
    await message.answer(
        "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
        reply_markup=admin_kb.users_list_kb(users, page=0, per_page=20),
        parse_mode="HTML"
    )
    await state.clear()


@admin_router.message(F.text == "üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def admin_promocodes_start(message: Message):
    promocodes = await admin_req.get_promocodes(skip=0, limit=20)
    if not promocodes:
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="admin_add_promocode"),
                InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin_back_to_main")
            ]])
        )
        return
    
    admin_logger.info(f"Admin {message.from_user.id} viewed promocodes list")
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
        reply_markup=admin_kb.promocodes_list_kb(promocodes, page=0, per_page=20),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data.startswith("admin_promocodes_page_"))
async def admin_promocodes_page(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    promocodes = await admin_req.get_promocodes(skip=page * 20, limit=20)
    if not promocodes:
        await callback.message.edit_text(
            "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="admin_add_promocode"),
                InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin_back_to_main")
            ]])
        )
        return
    
    await callback.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
        reply_markup=admin_kb.promocodes_list_kb(promocodes, page=page, per_page=20),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_add_promocode")
async def admin_add_promocode_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AdminAuthStates.add_promo_code)
    await callback.answer()

@admin_router.message(AdminAuthStates.add_promo_code)
async def admin_add_promocode_code(message: Message, state: FSMContext):
    code = message.text.strip()
    if not re.match(r"^[a-zA-Z0-9]+$", code):
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(code=code)
    await message.answer(
        str("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n") +
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ: balance_–°–£–ú–ú–ê\n\n" +
        "–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (1 –º–µ—Å—è—Ü): device_promo\n" +
        "–ü—Ä–æ–º–æ–∫–æ–¥ –∫–æ–±–º–æ: combo_5 –∏–ª–∏ combo_10")
    await state.set_state(AdminAuthStates.add_promo_type)

@admin_router.message(AdminAuthStates.add_promo_type)
async def admin_add_promocode_type(message: Message, state: FSMContext):
    type_ = message.text.strip().lower()
    valid_types = [
        "device_promo", "combo_5", "combo_10",
        *[f"balance_{amount}" for amount in range(1, 10001)]
    ]
    if type_ not in valid_types:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(type=type_)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):")
    await state.set_state(AdminAuthStates.add_promo_max_usage)

@admin_router.message(AdminAuthStates.add_promo_max_usage)
async def admin_add_promocode_max_usage(message: Message, state: FSMContext):
    try:
        max_usage = int(message.text.strip())
        if max_usage < 0:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ >= 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    code = data["code"]
    type_ = data["type"]
    
    result = await admin_req.create_promocode(code, type_, max_usage)
    if result["success"]:
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω.")
        admin_logger.info(f"Admin {message.from_user.id} created promocode {code} with type {type_}, max_usage {max_usage}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        promocodes = await admin_req.get_promocodes(skip=0, limit=20)
        if promocodes:
            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
                reply_markup=admin_kb.promocodes_list_kb(promocodes, page=0, per_page=20),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="admin_add_promocode"),
                    InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin_back_to_main")
                ]])
            )
    else:
        error_msg = result["error"]
        await message.answer(
            f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥:",
            parse_mode="HTML"
        )
        admin_logger.error(f"Admin {message.from_user.id} failed to create promocode {code}: {error_msg}")
        await state.set_state(AdminAuthStates.add_promo_code)
        return
    
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_promocode_profile_"))
async def admin_promocode_profile(callback: CallbackQuery):
    code = callback.data.split("_")[-1]
    promocodes = await admin_req.get_promocodes(code=code)
    if not promocodes:
        await callback.message.edit_text("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        await callback.answer()
        return
    
    promocode = promocodes[0]
    is_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if promocode["is_active"] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    usage_text = f"{promocode['usage_count']}/‚àû" if promocode["max_usage"] == 0 else f"{promocode['usage_count']}/{promocode['max_usage']}"
    text = (
        f"<b>üéü –ü—Ä–æ–º–æ–∫–æ–¥:</b> {promocode['code']}\n"
        f"<b>üìã –¢–∏–ø:</b> {promocode['type']}\n"
        f"<b>üîÑ –°—Ç–∞—Ç—É—Å:</b> {is_active}\n"
        f"<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {usage_text}\n"
        f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> {promocode['created_at']}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_kb.promocode_profile_kb(code, promocode),
        parse_mode="HTML"
    )
    admin_logger.info(f"Admin {callback.from_user.id} viewed promocode {code}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_deactivate_promocode_"))
async def admin_deactivate_promocode(callback: CallbackQuery):
    code = callback.data.split("_")[-1]
    result = await admin_req.delete_promocode(code)
    
    if result["success"]:
        usage_count = result["usage_count"]
        await callback.message.edit_text(
            f"–ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É–¥–∞–ª—ë–Ω.",
            parse_mode="HTML"
        )
        admin_logger.info(f"Admin {callback.from_user.id} deleted promocode {code}")
        admin_logger.info(f"Deleted {usage_count} promocode_usages for promocode {code}")
    else:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {result['error']}",
            parse_mode="HTML"
        )
        admin_logger.error(f"Admin {callback.from_user.id} failed to delete promocode {code}: {result['error']}")
    
    await callback.answer()

@admin_router.message(F.text == "üñ• –°–µ—Ä–≤–µ—Ä—ã")
async def admin_outline_servers(
        message: Message
) -> None:
   
    servers = await admin_req.get_outline_servers()
    if not servers:
        await message.answer(
            "–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ Outline.",
            reply_markup=admin_kb.outline_servers_kb(servers=[])
        )
    else:
        await message.answer(
            "<b>–°–µ—Ä–≤–µ—Ä—ã Outline</b>",
            parse_mode="HTML",
            reply_markup=admin_kb.outline_servers_kb(servers)
        )
    
    admin_logger.info(f"Admin {message.from_user.id} viewed outline servers")

@admin_router.callback_query(F.data == "admin_add_outline_server")
async def admin_add_outline_server(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
   
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
        '–ü—Ä–∏–º–µ—Ä: {"apiUrl":"https://example.com:12345/abc","certSha256":"847B4427DCBCBA150CF28D932AE4CA017E5024FAE3B9F54095C17051320C03E4"}',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_outline_servers")
        ]])
    )
    await state.set_state(AdminAuthStates.enter_json)
    await callback.answer()

@admin_router.message(AdminAuthStates.enter_json)
async def process_outline_server_json(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        data = json.loads(message.text)
        api_url = data.get("apiUrl")
        cert_sha256 = data.get("certSha256")
        
        if not api_url or not cert_sha256:
            await message.answer("–û—à–∏–±–∫–∞: JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å apiUrl –∏ certSha256.")
            return
        
        if not re.match(r"^https?://", api_url):
            await message.answer("–û—à–∏–±–∫–∞: apiUrl –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.")
            return
        
        if not re.match(r"^[A-F0-9]{64}$", cert_sha256):
            await message.answer("–û—à–∏–±–∫–∞: certSha256 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 64-—Å–∏–º–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–∑ A-F0-9.")
            return

        await state.update_data(api_url=api_url, cert_sha256=cert_sha256)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∫–ª—é—á–µ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):",
        )
        admin_logger.info(f"Admin {message.from_user.id} added outline server {api_url}")
        await state.set_state(AdminAuthStates.enter_key_limit)

    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@admin_router.message(AdminAuthStates.enter_key_limit)
async def process_key_limit(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        key_limit = int(message.text)
        if key_limit <= 0:
            await message.answer("–û—à–∏–±–∫–∞: –õ–∏–º–∏—Ç –∫–ª—é—á–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        state_data = await state.get_data()
        api_url = state_data.get("api_url")
        cert_sha256 = state_data.get("cert_sha256")
        
        result = await admin_req.create_outline_server(api_url, cert_sha256, key_limit)
        if result["success"]:
            await message.answer(
                f"–°–µ—Ä–≤–µ—Ä {api_url} –¥–æ–±–∞–≤–ª–µ–Ω —Å –ª–∏–º–∏—Ç–æ–º {key_limit} –∫–ª—é—á–µ–π."
            )
            admin_logger.info(f"Admin {message.from_user.id} added outline server {api_url} with key_limit {key_limit}")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {result['error']}")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_delete_outline_server_"))
async def admin_delete_outline_server(
        callback: CallbackQuery
) -> None:

    server_id = int(callback.data.split("_")[-1])
    result = await admin_req.delete_outline_server(server_id)
    if result["success"]:
        await callback.message.edit_text(
            f"–°–µ—Ä–≤–µ—Ä {server_id} —É–¥–∞–ª—ë–Ω."
        )
        admin_logger.info(f"Admin {callback.from_user.id} deleted outline server {server_id}")
    else:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_view_server_"))
async def admin_view_server(
        callback: CallbackQuery
) -> None:

    server_id = int(callback.data.split("_")[-1])
    servers = await admin_req.get_outline_servers()
    server = next((s for s in servers if s["id"] == server_id), None)
    
    if not server:
        await callback.message.edit_text(
            "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_outline_servers")
            ]])
        )
        await callback.answer()
        return
    
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if server["is_active"] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    text = (
        f"<b>–°–µ—Ä–≤–µ—Ä {server['id']}</b>\n\n"
        f"ID: {server['id']}\n"
        f"URL: {server['api_url']}\n"
        f"–ö–ª—é—á–µ–π: {server['key_count']}/{server['key_limit']}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°–æ–∑–¥–∞–Ω: {server['created_at']}"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=admin_kb.outline_server_menu_kb(str(server['id']))
    )
    
    admin_logger.info(f"Admin {callback.from_user.id} viewed outline server {server_id}")
    await callback.answer()

###########
# RAFFLES #
###########

@admin_router.message(F.text == "üéâ –†–æ–∑—ã–≥—Ä—ã—à")
async def raffles_menu(
        message: Message
) -> None:
    await message.answer(
        "–ú–µ–Ω—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π",
        reply_markup=admin_kb.admin_raffle_menu_kb()
    )

@admin_router.callback_query(F.data == "admin_create_raffle")
async def create_raffle_start(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
        reply_markup=admin_kb.raffle_type_kb()
    )
    await state.set_state(RaffleAdminStates.select_type)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("raffle_type_"))
async def process_raffle_type(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffle_type = callback.data.split("_")[-1]
    await state.update_data(raffle_type=raffle_type)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
    await state.set_state(RaffleAdminStates.enter_name)
    await callback.answer()

@admin_router.message(RaffleAdminStates.enter_name)
async def process_raffle_name(
        message: Message, 
        state: FSMContext
) -> None:
    await state.update_data(name=message.text)
    data = await state.get_data()
    if data["raffle_type"] == "ticket":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)")
        await state.set_state(RaffleAdminStates.enter_ticket_price)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-30 12:00)")
        await state.set_state(RaffleAdminStates.enter_start_date)

@admin_router.message(RaffleAdminStates.enter_ticket_price)
async def process_ticket_price(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        ticket_price = float(message.text)
        if ticket_price <= 0:
            await message.answer("–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        await state.update_data(ticket_price=ticket_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-30 12:00)")
        await state.set_state(RaffleAdminStates.enter_start_date)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@admin_router.message(RaffleAdminStates.enter_start_date)
async def process_start_date(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        start_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        await state.update_data(start_date=start_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-30 12:00)")
        await state.set_state(RaffleAdminStates.enter_end_date)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º")

@admin_router.message(RaffleAdminStates.enter_end_date)
async def process_end_date(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        end_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
        data = await state.get_data()
        if end_date <= data["start_date"]:
            await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
            return
        await state.update_data(end_date=end_date)
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await state.set_state(RaffleAdminStates.upload_images)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º")

@admin_router.message(RaffleAdminStates.upload_images, F.photo)
async def process_images(
        message: Message, 
        state: FSMContext
) -> None:
    data = await state.get_data()
    images = data.get("images", [])
    file_id = message.photo[-1].file_id
    file_path = f"photos/{file_id}.jpg"
    os.makedirs("photos", exist_ok=True)
    
    try:
        file = await message.bot.get_file(file_id)
        if not file.file_path:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            return
        logger.info(f"File path: {file.file_path}")
        await message.bot.download_file(file.file_path, destination=file_path)
        images.append(file_id)
        await state.update_data(images=images)
        await message.answer(
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë", callback_data="upload_another")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_upload")]
            ])
        )
    except Exception as e:
        logger.error(f"Error downloading image: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@admin_router.callback_query(F.data == "upload_another")
async def upload_another_image(
        callback: CallbackQuery
) -> None:
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
    await callback.answer()

@admin_router.callback_query(F.data == "finish_upload")
async def finish_upload(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    data = await state.get_data()
    images = data.get("images", [])
    
    if not images:
        await callback.message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await callback.answer()
        return
    
    raffle = {
        "type": data["raffle_type"],
        "name": data["name"],
        "ticket_price": data.get("ticket_price"),
        "start_date": data["start_date"].isoformat(),
        "end_date": data["end_date"].isoformat(),
        "images": images
    }
    
    await state.update_data(raffle=raffle)
    
    text = f"–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: {raffle['name']}"
    await callback.message.answer_photo(
        photo=images[0],
        caption=text,
        reply_markup=admin_kb.raffle_confirmation_kb()
    )
    await state.set_state(RaffleAdminStates.waiting_for_raffle_confirmation)
    logger.info(f"Admin {callback.from_user.id} previewed raffle")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_raffle_confirm", RaffleAdminStates.waiting_for_raffle_confirmation)
async def raffle_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    raffle = data.get("raffle")
    
    response = await raffle_req.create_raffle(raffle)
    if response:
        raffle_id = response["id"]
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        channel_id = CHANNEL_ID
        text = f"–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à: {raffle['name']}"
        await callback.message.bot.send_photo(
            chat_id=channel_id,
            photo=raffle["images"][0],
            caption=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", url=BOT_URL)]
            ])
        )
        await callback.message.edit_text("–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
        logger.info(f"Admin {callback.from_user.id} created and sent raffle: {raffle['name']}")
    else:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        logger.error(f"Admin {callback.from_user.id} failed to create raffle")
    
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data == "admin_raffle_cancel", RaffleAdminStates.waiting_for_raffle_confirmation)
async def raffle_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    logger.info(f"Admin {callback.from_user.id} cancelled raffle")
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data == "admin_edit_raffle")
async def edit_raffle_start(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    try:
        raffles = await raffle_req.get_active_raffles()
        if not raffles:
            await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏")
            await callback.answer()
            return
        
        builder = InlineKeyboardBuilder()
        for raffle in raffles:
            builder.row(
                InlineKeyboardButton(
                    text=f"{raffle['name']} (ID: {raffle['id']})",
                    callback_data=f"edit_raffle_{raffle['id']}"
                )
            )
        builder.row(
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_raffles")
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=builder.as_markup())
        await state.set_state(RaffleAdminStates.select_raffle)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in edit_raffle_start: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await callback.answer()

@admin_router.callback_query(F.data.startswith("edit_raffle_"))
async def select_raffle_to_edit(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffle_id = int(callback.data.split("_")[-1])
    await state.update_data(raffle_id=raffle_id)
    
    try:
        raffle = await raffle_req.get_active_raffles(raffle_id)
        if not raffle:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        start_date = datetime.fromisoformat(raffle["start_date"]).strftime("%Y-%m-%d %H:%M")
        end_date = datetime.fromisoformat(raffle["end_date"]).strftime("%Y-%m-%d %H:%M")
        ticket_price = f"{raffle['ticket_price']} —Ä—É–±." if raffle.get("ticket_price") else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        is_active = "–ê–∫—Ç–∏–≤–µ–Ω" if raffle["is_active"] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ (ID: {raffle['id']}):\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {raffle['name']}\n"
            f"üéü –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {ticket_price}\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {is_active}\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
        )
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")],
            [InlineKeyboardButton(text="–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞", callback_data="edit_ticket_price")],
            [InlineKeyboardButton(text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", callback_data="edit_start_date")],
            [InlineKeyboardButton(text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="edit_end_date")],
            [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="edit_images")],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="edit_is_active")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if raffle.get("images"):
            await callback.message.answer_photo(
                photo=raffle["images"][0],  # –ü–µ—Ä–≤—ã–π file_id
                caption=text,
                reply_markup=keyboard
            )
        else:
            await callback.message.answer(
                text=text,
                reply_markup=keyboard
            )
        
        await state.set_state(RaffleAdminStates.edit_field)
        await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in select_raffle_to_edit: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await callback.answer()

@admin_router.callback_query(F.data.startswith("edit_"))
async def process_edit_field(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    field = callback.data.split("_")[-1]
    logger.debug(f"Processing edit field: {field}")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö callback_data
    field_map = {
        "price": "ticket_price",
        "date": "start_date",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º start_date
        "start_date": "start_date",
        "end_date": "end_date",
        "active": "is_active",
        "is_active": "is_active",
        "name": "name",
        "images": "images"
    }
    
    if field not in field_map:
        logger.error(f"Unknown edit field: {field}")
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await callback.answer()
        return
    
    field_key = field_map[field]
    messages = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
        "ticket_price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö)",
        "start_date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º)",
        "end_date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º)",
        "images": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "is_active": "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1 - –∞–∫—Ç–∏–≤–µ–Ω, 0 - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"
    }
    
    try:
        await callback.message.answer(messages[field_key])
        await state.update_data(edit_field=field_key)
        await state.set_state(RaffleAdminStates.edit_field)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_edit_field: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è")
        await callback.answer()

@admin_router.message(RaffleAdminStates.edit_field)
async def process_edit_value(
        message: Message, 
        state: FSMContext
) -> None:
    data = await state.get_data()
    field = data["edit_field"]
    raffle_id = data["raffle_id"]
    update_data = {}
    
    try:
        if field == "name":
            update_data["name"] = message.text
        elif field == "ticket_price":
            ticket_price = float(message.text)
            if ticket_price <= 0:
                await message.answer("–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            update_data["ticket_price"] = ticket_price
        elif field == "start_date":
            start_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
            update_data["start_date"] = start_date.isoformat()
        elif field == "end_date":
            end_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M").replace(tzinfo=timezone.utc)
            raffle = await raffle_req.get_active_raffles(raffle_id)
            if not raffle or "start_date" not in raffle:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
                return
            if end_date <= datetime.fromisoformat(raffle["start_date"]):
                await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
                return
            update_data["end_date"] = end_date.isoformat()
        elif field == "is_active":
            is_active = message.text.strip() == "1"
            update_data["is_active"] = is_active
        elif field == "images":
            if not message.photo:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            file_id = message.photo[-1].file_id
            file_path = f"photos/{file_id}.jpg"
            os.makedirs("photos", exist_ok=True)
            file = await message.bot.get_file(file_id)
            await file.download(destination_file=file_path)
            update_data["images"] = [file_path]
        
        response = await raffle_req.update_raffle(raffle_id, update_data)
        if response:
            await message.answer("–†–æ–∑—ã–≥—Ä—ã—à –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Error in process_edit_value: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@admin_router.callback_query(F.data == "admin_set_winners")
async def set_winners_start(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffles = await raffle_req.get_active_raffles()
    if not raffles:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for raffle in raffles:
        builder.row(
            InlineKeyboardButton(
                text=f"{raffle['name']} (ID: {raffle['id']})",
                callback_data=f"set_winner_raffle_{raffle['id']}"
            )
        )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", reply_markup=builder.as_markup())
    await state.set_state(RaffleAdminStates.select_raffle)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("set_winner_raffle_"))
async def select_winner_raffle(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffle_id = int(callback.data.split("_")[-1])
    await state.update_data(raffle_id=raffle_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
    await state.set_state(RaffleAdminStates.select_winner)
    await callback.answer()

@admin_router.message(RaffleAdminStates.select_winner)
async def process_winner(
        message: Message, 
        state: FSMContext
) -> None:
    try:
        user_id = int(message.text)
        data = await state.get_data()
        raffle_id = data["raffle_id"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        response = await raffle_req.set_winners(raffle_id, {"user_id": user_id})
        if not response:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        raffle = await raffle_req.get_active_raffles(raffle_id)
        if not raffle:
            await message.answer("–û—à–∏–±–∫–∞: —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
       
        await message.answer("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()
        
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
    except Exception as e:
        logger.error(f"Error in process_winner: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@admin_router.callback_query(F.data == "admin_add_tickets")
async def add_tickets_start(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffles = await raffle_req.get_active_raffles()
    if not raffles:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for raffle in raffles:
        builder.row(
            InlineKeyboardButton(
                text=f"{raffle['name']} (ID: {raffle['id']})",
                callback_data=f"add_tickets_raffle_{raffle['id']}"
            )
        )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤", reply_markup=builder.as_markup())
    await state.set_state(RaffleAdminStates.select_raffle)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("add_tickets_raffle_"))
async def select_tickets_raffle(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffle_id = int(callback.data.split("_")[-1])
    await state.update_data(raffle_id=raffle_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ (—Ñ–æ—Ä–º–∞—Ç: user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
    await state.set_state(RaffleAdminStates.add_tickets)
    await callback.answer()

@admin_router.message(RaffleAdminStates.add_tickets)
async def process_add_tickets(
        message: Message,
        state: FSMContext
) -> None:
    try:
        user_id, count = map(int, message.text.split())
        if count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        data = await state.get_data()
        raffle_id = data["raffle_id"]
        response = await raffle_req.add_tickets(
                raffle_id, 
                {"user_id": user_id, "count": count})
        if response:
            await message.answer("–ë–∏–ª–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤")
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ: user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    except Exception as e:
        logger.error(f"Error in process_add_tickets: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@admin_router.callback_query(F.data == "admin_view_participants")
async def view_participants_start(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    raffles = await raffle_req.get_active_raffles()
    if not raffles:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for raffle in raffles:
        builder.row(
            InlineKeyboardButton(
                text=f"{raffle['name']} (ID: {raffle['id']})",
                callback_data=f"view_participants_{raffle['id']}"
            )
        )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", reply_markup=builder.as_markup())
    await state.set_state(RaffleAdminStates.select_raffle)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("view_participants_") | F.data.startswith("admin_participants_"))
async def view_participants(
        callback: CallbackQuery, 
        state: FSMContext
) -> None:
    try:
        parts = callback.data.split("_")
        raffle_id = int(parts[-2] if parts[0] == "admin_participants" else parts[-1])
        page = int(parts[-1]) if parts[0] == "admin_participants" else 0
        per_page = 10
        
        tickets = await raffle_req.get_tickets(raffle_id, page, per_page)
        if not tickets:
            await callback.message.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
            await callback.answer()
            return
        
        await callback.message.edit_text(
            text="–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:",
            reply_markup=admin_kb.raffle_participants_kb(
                tickets, 
                raffle_id, 
                page, 
                per_page
                ))
        await state.update_data(raffle_id=raffle_id)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in view_participants: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await callback.answer()
